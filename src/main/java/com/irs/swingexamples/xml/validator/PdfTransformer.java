package com.irs.swingexamples.xml.validator;

import org.apache.fop.apps.FOPException;
import org.apache.fop.apps.Fop;
import org.apache.fop.apps.FopFactory;
import org.apache.fop.apps.MimeConstants;
import org.xml.sax.SAXException;

import javax.xml.transform.*;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

/**
 * Clase de una transformaci√≥n XSLT para PDF.
 * Librerias requeridas:
 * 		avalon-framework-cvs-20020806.jar
 * 		batik.jar
 * 		xalan-2.4.1.jar
 * 		xercesImpl-2.2.1.jar
 * 		xml-apis.jar
 *      fop.jar
 *
 * @author IRS
 * @version 1.0.0
 */
public class PdfTransformer extends XsltTransformer {

    public PdfTransformer() {
        super();
    }

    public void transformar(String xmlFileName, String xslFileName, String outFileName) {
        /*
        Driver driver = new Driver();

        //Setup Renderer (output format)
        driver.setRenderer(Driver.RENDER_PDF);

        //Setup logger
        Logger logger = new ConsoleLogger(ConsoleLogger.LEVEL_INFO);
        driver.setLogger(logger);
        MessageHandler.setScreenLogger(logger);
        */
        try {
            FopFactory fopFactory = FopFactory.newInstance(new File("./src/main/resources/fop.xconf"));

            //Setup output
            OutputStream out = new FileOutputStream(outFileName);

            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, out);

            File xmlFile = new File(xmlFileName);
            File xslFile = new File(xslFileName);

            //driver.setOutputStream(out);

            //Setup XSLT
            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer transformer = factory.newTransformer(new StreamSource(xslFile));

            //Setup input for XSLT transformation
            Source src = new StreamSource(xmlFile);

            //Resulting SAX events (the generated FO) must be piped through to FOP
            //Result res = new SAXResult(driver.getContentHandler());
            Result res = new SAXResult(fop.getDefaultHandler());

            //Start XSLT transformation and FOP processing
            transformer.transform(src, res);

            out.close();
        } catch (IOException e) {
            errors.add("Error de IO: " + e.getMessage());
            valid = false;
        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser
            errors.add("Error de Factoria de Transformacion: " + tce.getMessage());
            valid = false;
        } catch (TransformerException te) {
            // Error generated by the parser
            errors.add("Error de Transformacion: " + te.getMessage());
            valid = false;
        } catch (SAXException sex) {
            errors.add("Error de Fop: " + sex.getMessage());
            valid = false;
        }
    }
}
