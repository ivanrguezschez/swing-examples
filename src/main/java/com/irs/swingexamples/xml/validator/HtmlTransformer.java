package com.irs.swingexamples.xml.validator;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

/**
 * Clase de una transformaci√≥n XSLT para HTML.
 *
 * @author IRS
 * @version 1.0.0
 */
public class HtmlTransformer extends XsltTransformer {

    public HtmlTransformer() {
        super();
    }

    public void transformar(String xmlFileName, String xslFileName, String outFileName) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            File xmlFile = new File(xmlFileName);
            File xslFile = new File(xslFileName);
            File outFile = new File(outFileName);

            OutputStream out = new FileOutputStream(outFile);

            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(xmlFile);

            TransformerFactory tFactory = TransformerFactory.newInstance();
            Transformer transformer = tFactory.newTransformer(new StreamSource(xslFile));

            DOMSource source = new DOMSource(document);
            //StreamResult result = new StreamResult(outFile);
            StreamResult result = new StreamResult(out);
            transformer.transform(source, result);
            //transformer.transform(new DOMSource(document), new StreamResult(System.out));
        } catch (SAXParseException e) {
            // Error generated by the parser
            errors.add("Error de parseo en linea " + e.getLineNumber() + ", uri " + e.getSystemId() + " " + e.getMessage());
            valid = false;
        } catch (SAXException e) {
            errors.add("Error: " + e.getMessage());
            valid = false;
        } catch (ParserConfigurationException e) {
            errors.add("Error de configuracion del parseador: " + e.getMessage());
            valid = false;
        } catch (IOException e) {
            errors.add("Error de IO: " + e.getMessage());
            valid = false;
        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser
            errors.add("Error de Factoria de Transformacion: " + tce.getMessage());
            valid = false;
        } catch (TransformerException te) {
            // Error generated by the parser
            errors.add("Error de Transformacion: " + te.getMessage());
            valid = false;
        }
    }
}

